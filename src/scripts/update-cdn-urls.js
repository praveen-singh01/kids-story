#!/usr/bin/env node

/**
 * Script to update existing content with proper CDN URLs
 */

require('dotenv').config();
const mongoose = require('mongoose');
const Content = require('../models/Content');

// CDN configuration
const CDN_BASE_URL = process.env.CLOUDFRONT_DISTRIBUTION_DOMAIN 
  ? `https://${process.env.CLOUDFRONT_DISTRIBUTION_DOMAIN}`
  : 'https://d1ta1qd8y4woyq.cloudfront.net';

// Function to convert relative URL to CDN URL
const toCDNUrl = (url) => {
  if (!url) return url;
  if (url.startsWith('http')) return url; // Already absolute URL
  if (url.startsWith('/assets/')) {
    return `${CDN_BASE_URL}${url}`;
  }
  return url;
};

// Function to update asset mappings with CDN URLs
function getUpdatedAssetMappings() {
  return {
    'buddha-and-angulimala': {
      en: {
        title: 'Buddha and Angulimala',
        description: 'A story about compassion and transformation, where Buddha helps a feared bandit find peace.',
        audioUrl: `${CDN_BASE_URL}/assets/Buddha and Angulimala.mp3`,
        imageUrl: `${CDN_BASE_URL}/assets/English_buddha (1).png`,
        thumbnailUrl: `${CDN_BASE_URL}/assets/English_buddha (1).png`,
        metadata: {
          keyValue: 'Compassion',
          summary: 'Through this powerful tale, children learn that everyone can change and find peace through compassion and understanding.'
        }
      },
      hi: {
        title: '‡§¨‡•Å‡§¶‡•ç‡§ß ‡§î‡§∞ ‡§Ö‡§Ç‡§ó‡•Å‡§≤‡§ø‡§Æ‡§æ‡§≤',
        description: '‡§ï‡§∞‡•Å‡§£‡§æ ‡§î‡§∞ ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§® ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä, ‡§ú‡§π‡§æ‡§Å ‡§¨‡•Å‡§¶‡•ç‡§ß ‡§è‡§ï ‡§°‡§∞‡§æ‡§µ‡§®‡•á ‡§°‡§æ‡§ï‡•Ç ‡§ï‡•ã ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§™‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§',
        audioUrl: `${CDN_BASE_URL}/assets/ElevenLabs_buddha_and_angulimala.mp3`,
        imageUrl: `${CDN_BASE_URL}/assets/Hindi.png`,
        thumbnailUrl: `${CDN_BASE_URL}/assets/Hindi.png`,
        metadata: {
          keyValue: '‡§ï‡§∞‡•Å‡§£‡§æ',
          summary: '‡§á‡§∏ ‡§∂‡§ï‡•ç‡§§‡§ø‡§∂‡§æ‡§≤‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á, ‡§¨‡§ö‡•ç‡§ö‡•á ‡§∏‡•Ä‡§ñ‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§π‡§∞ ‡§ï‡•ã‡§à ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§ï‡§∞‡•Å‡§£‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§ù ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§∂‡§æ‡§Ç‡§§‡§ø ‡§™‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§'
        }
      }
    },
    'the-brahmin-and-three-crooks': {
      en: {
        title: 'The Brahmin and Three Crooks',
        description: 'A wise tale about how cleverness and deception can be overcome by wisdom and discernment.',
        audioUrl: `${CDN_BASE_URL}/assets/ElevenLabs_The_Brahmin_and_the_Crooks_english.mp3`,
        imageUrl: `${CDN_BASE_URL}/assets/English_bhramin.png`,
        thumbnailUrl: `${CDN_BASE_URL}/assets/English_bhramin.png`,
        metadata: {
          keyValue: 'Wisdom',
          summary: 'This story teaches children the importance of thinking carefully and not being easily fooled by others.'
        }
      },
      hi: {
        title: '‡§¨‡•ç‡§∞‡§æ‡§π‡•ç‡§Æ‡§£ ‡§î‡§∞ ‡§§‡•Ä‡§® ‡§†‡§ó',
        description: '‡§è‡§ï ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ú‡•ã ‡§¨‡§§‡§æ‡§§‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§ï‡•à‡§∏‡•á ‡§ö‡§æ‡§≤‡§æ‡§ï‡•Ä ‡§î‡§∞ ‡§ß‡•ã‡§ñ‡•á ‡§ï‡•ã ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§î‡§∞ ‡§µ‡§ø‡§µ‡•á‡§ï ‡§∏‡•á ‡§π‡§∞‡§æ‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§',
        audioUrl: `${CDN_BASE_URL}/assets/ElevenLabs_brahmin_and_crooks_-_hindi.mp3`,
        imageUrl: `${CDN_BASE_URL}/assets/Hindi_bhraman.png`,
        thumbnailUrl: `${CDN_BASE_URL}/assets/Hindi_bhraman.png`,
        metadata: {
          keyValue: '‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø',
          summary: '‡§Ø‡§π ‡§ï‡§π‡§æ‡§®‡•Ä ‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§ø‡§ñ‡§æ‡§§‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§∏‡•ã‡§ö-‡§∏‡§Æ‡§ù‡§ï‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡§æ ‡§î‡§∞ ‡§¶‡•Ç‡§∏‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§ß‡•ã‡§ñ‡§æ ‡§® ‡§ñ‡§æ‡§®‡§æ ‡§ï‡§ø‡§§‡§®‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§'
        }
      }
    }
  };
}

/**
 * Update existing content with CDN URLs
 */
async function updateContentWithCDNUrls() {
  console.log('\nüîÑ Updating content with CDN URLs...');

  try {
    const contents = await Content.find({});
    const ASSET_MAPPINGS = getUpdatedAssetMappings();
    let updated = 0;

    for (const content of contents) {
      let hasUpdates = false;

      // Check if we have predefined mappings for this content
      if (ASSET_MAPPINGS[content.slug]) {
        console.log(`üìù Updating CDN URLs for: ${content.title}`);
        
        // Update language-specific content with CDN URLs
        if (content.languages) {
          content.languages['en'] = ASSET_MAPPINGS[content.slug].en;
          content.languages['hi'] = ASSET_MAPPINGS[content.slug].hi;
          hasUpdates = true;
        }
      } else {
        // Update any relative URLs in the base content
        if (content.audioUrl && content.audioUrl.startsWith('/assets/')) {
          content.audioUrl = toCDNUrl(content.audioUrl);
          hasUpdates = true;
        }
        if (content.imageUrl && content.imageUrl.startsWith('/assets/')) {
          content.imageUrl = toCDNUrl(content.imageUrl);
          hasUpdates = true;
        }
        if (content.thumbnailUrl && content.thumbnailUrl.startsWith('/assets/')) {
          content.thumbnailUrl = toCDNUrl(content.thumbnailUrl);
          hasUpdates = true;
        }

        // Update language-specific content URLs
        if (content.languages) {
          for (const [lang, langContent] of Object.entries(content.languages)) {
            if (langContent.audioUrl && langContent.audioUrl.startsWith('/assets/')) {
              langContent.audioUrl = toCDNUrl(langContent.audioUrl);
              hasUpdates = true;
            }
            if (langContent.imageUrl && langContent.imageUrl.startsWith('/assets/')) {
              langContent.imageUrl = toCDNUrl(langContent.imageUrl);
              hasUpdates = true;
            }
            if (langContent.thumbnailUrl && langContent.thumbnailUrl.startsWith('/assets/')) {
              langContent.thumbnailUrl = toCDNUrl(langContent.thumbnailUrl);
              hasUpdates = true;
            }
          }
        }
      }

      if (hasUpdates) {
        await content.save();
        updated++;
        console.log(`‚úÖ Updated: ${content.title}`);
      }
    }

    console.log(`\nüìä CDN URL Update Summary:`);
    console.log(`   Updated: ${updated}`);
    console.log(`   Total: ${contents.length}`);

  } catch (error) {
    console.error('‚ùå Error updating CDN URLs:', error);
    throw error;
  }
}

/**
 * Main execution function
 */
async function main() {
  try {
    console.log('üöÄ Starting CDN URL update...');
    console.log(`üì° CDN Base URL: ${CDN_BASE_URL}`);

    // Connect to MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // Update content with CDN URLs
    await updateContentWithCDNUrls();

    console.log('\nüéâ CDN URL update completed successfully!');

  } catch (error) {
    console.error('üí• CDN URL update failed:', error);
    process.exit(1);
  } finally {
    // Close database connection
    await mongoose.disconnect();
    console.log('\nüëã Database connection closed');
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { main };
